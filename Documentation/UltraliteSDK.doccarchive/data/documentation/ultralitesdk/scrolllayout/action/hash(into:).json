{"metadata":{"roleHeading":"Instance Method","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" and "},{"code":"RawValue","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"extendedModule":"Swift","symbolKind":"method","externalID":"s:SYsSHRzSH8RawValueSYRpzrlE4hash4intoys6HasherVz_tF::SYNTHESIZED::s:12UltraliteSDK12ScrollLayoutC6ActionO","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s6HasherV","text":"Hasher","kind":"typeIdentifier"},{"text":")","kind":"text"}],"modules":[{"relatedModules":["Swift"],"name":"UltraliteSDK"}],"title":"hash(into:)"},"hierarchy":{"paths":[["doc:\/\/com.vuzix.UltraliteSDK\/documentation\/UltraliteSDK","doc:\/\/com.vuzix.UltraliteSDK\/documentation\/UltraliteSDK\/ScrollLayout","doc:\/\/com.vuzix.UltraliteSDK\/documentation\/UltraliteSDK\/ScrollLayout\/Action","doc:\/\/com.vuzix.UltraliteSDK\/documentation\/UltraliteSDK\/ScrollLayout\/Action\/RawRepresentable-Implementations"]]},"identifier":{"url":"doc:\/\/com.vuzix.UltraliteSDK\/documentation\/UltraliteSDK\/ScrollLayout\/Action\/hash(into:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Inherited from "},{"type":"codeVoice","code":"RawRepresentable.hash(into:)"},{"type":"text","text":"."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/ultralitesdk\/scrolllayout\/action\/hash(into:)"]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":" "},{"text":"hasher","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:s6HasherV","text":"Hasher"},{"text":")","kind":"text"}],"platforms":["watchOS"]}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"references":{"doc://com.vuzix.UltraliteSDK/documentation/UltraliteSDK":{"url":"\/documentation\/ultralitesdk","abstract":[{"type":"text","text":"Use this SDK to easily send text and images to your Vuxix smart glasses."}],"title":"UltraliteSDK","identifier":"doc:\/\/com.vuzix.UltraliteSDK\/documentation\/UltraliteSDK","role":"collection","kind":"symbol","type":"topic"},"doc://com.vuzix.UltraliteSDK/documentation/UltraliteSDK/ScrollLayout/Action":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Action","kind":"identifier"}],"identifier":"doc:\/\/com.vuzix.UltraliteSDK\/documentation\/UltraliteSDK\/ScrollLayout\/Action","abstract":[{"type":"text","text":"Actions that can be used on a .scroll layout"}],"url":"\/documentation\/ultralitesdk\/scrolllayout\/action","role":"symbol","navigatorTitle":[{"text":"Action","kind":"identifier"}],"type":"topic","kind":"symbol","title":"ScrollLayout.Action"},"doc://com.vuzix.UltraliteSDK/documentation/UltraliteSDK/ScrollLayout/Action/hash(into:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"into"},{"text":": ","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Hasher","preciseIdentifier":"s:s6HasherV","kind":"typeIdentifier"},{"kind":"text","text":")"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"RawValue","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/ultralitesdk\/scrolllayout\/action\/hash(into:)","identifier":"doc:\/\/com.vuzix.UltraliteSDK\/documentation\/UltraliteSDK\/ScrollLayout\/Action\/hash(into:)","kind":"symbol","title":"hash(into:)","abstract":[],"role":"symbol"},"doc://com.vuzix.UltraliteSDK/documentation/UltraliteSDK/ScrollLayout/Action/RawRepresentable-Implementations":{"url":"\/documentation\/ultralitesdk\/scrolllayout\/action\/rawrepresentable-implementations","type":"topic","abstract":[],"identifier":"doc:\/\/com.vuzix.UltraliteSDK\/documentation\/UltraliteSDK\/ScrollLayout\/Action\/RawRepresentable-Implementations","title":"RawRepresentable Implementations","kind":"article","role":"collectionGroup"},"doc://com.vuzix.UltraliteSDK/documentation/UltraliteSDK/ScrollLayout":{"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"ScrollLayout","kind":"identifier"}],"url":"\/documentation\/ultralitesdk\/scrolllayout","identifier":"doc:\/\/com.vuzix.UltraliteSDK\/documentation\/UltraliteSDK\/ScrollLayout","kind":"symbol","title":"ScrollLayout","navigatorTitle":[{"kind":"identifier","text":"ScrollLayout"}],"abstract":[{"text":"When Ultralite.requestControl with a .scroll layout type .. this is the class you interate with to draw scrolling text to the screen.","type":"text"},{"text":" ","type":"text"},{"text":"Once the layout is .scrolled you must send one configure message to tell the layout how to setup.  It will setup the slice height and how many slices are visible.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"There are two supported modes: autoScroll on\/off"},{"text":" ","type":"text"},{"type":"text","text":"When autoScroll is true, the slices are automatically scrolled.  Subscribe to the delgate and listen for the scrolled callback, when you get it send another slice of text"},{"type":"text","text":" "},{"type":"text","text":"When autoScroll is false, you can drive the slices and how they look on the screen.  You can send all the slices at once or send one at a time and animate it onto the screen at the current time."}],"role":"symbol"}}}